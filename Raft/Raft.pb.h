// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Raft.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Raft_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Raft_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Raft_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Raft_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Raft_2eproto;
namespace rpcService {
class AppendEntriesRequest;
class AppendEntriesRequestDefaultTypeInternal;
extern AppendEntriesRequestDefaultTypeInternal _AppendEntriesRequest_default_instance_;
class AppendEntriesRequest_LogEntry;
class AppendEntriesRequest_LogEntryDefaultTypeInternal;
extern AppendEntriesRequest_LogEntryDefaultTypeInternal _AppendEntriesRequest_LogEntry_default_instance_;
class AppendEntriesResponse;
class AppendEntriesResponseDefaultTypeInternal;
extern AppendEntriesResponseDefaultTypeInternal _AppendEntriesResponse_default_instance_;
class RequestVoteRequest;
class RequestVoteRequestDefaultTypeInternal;
extern RequestVoteRequestDefaultTypeInternal _RequestVoteRequest_default_instance_;
class RequestVoteResponse;
class RequestVoteResponseDefaultTypeInternal;
extern RequestVoteResponseDefaultTypeInternal _RequestVoteResponse_default_instance_;
}  // namespace rpcService
PROTOBUF_NAMESPACE_OPEN
template<> ::rpcService::AppendEntriesRequest* Arena::CreateMaybeMessage<::rpcService::AppendEntriesRequest>(Arena*);
template<> ::rpcService::AppendEntriesRequest_LogEntry* Arena::CreateMaybeMessage<::rpcService::AppendEntriesRequest_LogEntry>(Arena*);
template<> ::rpcService::AppendEntriesResponse* Arena::CreateMaybeMessage<::rpcService::AppendEntriesResponse>(Arena*);
template<> ::rpcService::RequestVoteRequest* Arena::CreateMaybeMessage<::rpcService::RequestVoteRequest>(Arena*);
template<> ::rpcService::RequestVoteResponse* Arena::CreateMaybeMessage<::rpcService::RequestVoteResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace rpcService {

// ===================================================================

class AppendEntriesRequest_LogEntry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rpcService.AppendEntriesRequest.LogEntry) */ {
 public:
  inline AppendEntriesRequest_LogEntry() : AppendEntriesRequest_LogEntry(nullptr) {};
  virtual ~AppendEntriesRequest_LogEntry();

  AppendEntriesRequest_LogEntry(const AppendEntriesRequest_LogEntry& from);
  AppendEntriesRequest_LogEntry(AppendEntriesRequest_LogEntry&& from) noexcept
    : AppendEntriesRequest_LogEntry() {
    *this = ::std::move(from);
  }

  inline AppendEntriesRequest_LogEntry& operator=(const AppendEntriesRequest_LogEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppendEntriesRequest_LogEntry& operator=(AppendEntriesRequest_LogEntry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AppendEntriesRequest_LogEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AppendEntriesRequest_LogEntry* internal_default_instance() {
    return reinterpret_cast<const AppendEntriesRequest_LogEntry*>(
               &_AppendEntriesRequest_LogEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AppendEntriesRequest_LogEntry& a, AppendEntriesRequest_LogEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(AppendEntriesRequest_LogEntry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppendEntriesRequest_LogEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppendEntriesRequest_LogEntry* New() const final {
    return CreateMaybeMessage<AppendEntriesRequest_LogEntry>(nullptr);
  }

  AppendEntriesRequest_LogEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppendEntriesRequest_LogEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AppendEntriesRequest_LogEntry& from);
  void MergeFrom(const AppendEntriesRequest_LogEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppendEntriesRequest_LogEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rpcService.AppendEntriesRequest.LogEntry";
  }
  protected:
  explicit AppendEntriesRequest_LogEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Raft_2eproto);
    return ::descriptor_table_Raft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandNameFieldNumber = 3,
    kCommandFieldNumber = 4,
    kIndexFieldNumber = 1,
    kTermFieldNumber = 2,
  };
  // string commandName = 3;
  void clear_commandname();
  const std::string& commandname() const;
  void set_commandname(const std::string& value);
  void set_commandname(std::string&& value);
  void set_commandname(const char* value);
  void set_commandname(const char* value, size_t size);
  std::string* mutable_commandname();
  std::string* release_commandname();
  void set_allocated_commandname(std::string* commandname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_commandname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_commandname(
      std::string* commandname);
  private:
  const std::string& _internal_commandname() const;
  void _internal_set_commandname(const std::string& value);
  std::string* _internal_mutable_commandname();
  public:

  // bytes command = 4;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const void* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_command();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_command(
      std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // int64 index = 1;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::int64 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 term = 2;
  void clear_term();
  ::PROTOBUF_NAMESPACE_ID::int64 term() const;
  void set_term(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_term() const;
  void _internal_set_term(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:rpcService.AppendEntriesRequest.LogEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr commandname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::int64 index_;
  ::PROTOBUF_NAMESPACE_ID::int64 term_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Raft_2eproto;
};
// -------------------------------------------------------------------

class AppendEntriesRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rpcService.AppendEntriesRequest) */ {
 public:
  inline AppendEntriesRequest() : AppendEntriesRequest(nullptr) {};
  virtual ~AppendEntriesRequest();

  AppendEntriesRequest(const AppendEntriesRequest& from);
  AppendEntriesRequest(AppendEntriesRequest&& from) noexcept
    : AppendEntriesRequest() {
    *this = ::std::move(from);
  }

  inline AppendEntriesRequest& operator=(const AppendEntriesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppendEntriesRequest& operator=(AppendEntriesRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AppendEntriesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AppendEntriesRequest* internal_default_instance() {
    return reinterpret_cast<const AppendEntriesRequest*>(
               &_AppendEntriesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AppendEntriesRequest& a, AppendEntriesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AppendEntriesRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppendEntriesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppendEntriesRequest* New() const final {
    return CreateMaybeMessage<AppendEntriesRequest>(nullptr);
  }

  AppendEntriesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppendEntriesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AppendEntriesRequest& from);
  void MergeFrom(const AppendEntriesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppendEntriesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rpcService.AppendEntriesRequest";
  }
  protected:
  explicit AppendEntriesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Raft_2eproto);
    return ::descriptor_table_Raft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef AppendEntriesRequest_LogEntry LogEntry;

  // accessors -------------------------------------------------------

  enum : int {
    kLogEntriesFieldNumber = 5,
    kTermFieldNumber = 1,
    kLeaderIdFieldNumber = 2,
    kPrevLogIndexFieldNumber = 3,
    kPrevLogTermFieldNumber = 4,
  };
  // repeated .rpcService.AppendEntriesRequest.LogEntry LogEntries = 5;
  int logentries_size() const;
  private:
  int _internal_logentries_size() const;
  public:
  void clear_logentries();
  ::rpcService::AppendEntriesRequest_LogEntry* mutable_logentries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rpcService::AppendEntriesRequest_LogEntry >*
      mutable_logentries();
  private:
  const ::rpcService::AppendEntriesRequest_LogEntry& _internal_logentries(int index) const;
  ::rpcService::AppendEntriesRequest_LogEntry* _internal_add_logentries();
  public:
  const ::rpcService::AppendEntriesRequest_LogEntry& logentries(int index) const;
  ::rpcService::AppendEntriesRequest_LogEntry* add_logentries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rpcService::AppendEntriesRequest_LogEntry >&
      logentries() const;

  // int64 term = 1;
  void clear_term();
  ::PROTOBUF_NAMESPACE_ID::int64 term() const;
  void set_term(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_term() const;
  void _internal_set_term(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 leaderId = 2;
  void clear_leaderid();
  ::PROTOBUF_NAMESPACE_ID::int64 leaderid() const;
  void set_leaderid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_leaderid() const;
  void _internal_set_leaderid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 prevLogIndex = 3;
  void clear_prevlogindex();
  ::PROTOBUF_NAMESPACE_ID::int32 prevlogindex() const;
  void set_prevlogindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_prevlogindex() const;
  void _internal_set_prevlogindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 prevLogTerm = 4;
  void clear_prevlogterm();
  ::PROTOBUF_NAMESPACE_ID::int32 prevlogterm() const;
  void set_prevlogterm(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_prevlogterm() const;
  void _internal_set_prevlogterm(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:rpcService.AppendEntriesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rpcService::AppendEntriesRequest_LogEntry > logentries_;
  ::PROTOBUF_NAMESPACE_ID::int64 term_;
  ::PROTOBUF_NAMESPACE_ID::int64 leaderid_;
  ::PROTOBUF_NAMESPACE_ID::int32 prevlogindex_;
  ::PROTOBUF_NAMESPACE_ID::int32 prevlogterm_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Raft_2eproto;
};
// -------------------------------------------------------------------

class AppendEntriesResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rpcService.AppendEntriesResponse) */ {
 public:
  inline AppendEntriesResponse() : AppendEntriesResponse(nullptr) {};
  virtual ~AppendEntriesResponse();

  AppendEntriesResponse(const AppendEntriesResponse& from);
  AppendEntriesResponse(AppendEntriesResponse&& from) noexcept
    : AppendEntriesResponse() {
    *this = ::std::move(from);
  }

  inline AppendEntriesResponse& operator=(const AppendEntriesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppendEntriesResponse& operator=(AppendEntriesResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AppendEntriesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AppendEntriesResponse* internal_default_instance() {
    return reinterpret_cast<const AppendEntriesResponse*>(
               &_AppendEntriesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AppendEntriesResponse& a, AppendEntriesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AppendEntriesResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppendEntriesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppendEntriesResponse* New() const final {
    return CreateMaybeMessage<AppendEntriesResponse>(nullptr);
  }

  AppendEntriesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppendEntriesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AppendEntriesResponse& from);
  void MergeFrom(const AppendEntriesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppendEntriesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rpcService.AppendEntriesResponse";
  }
  protected:
  explicit AppendEntriesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Raft_2eproto);
    return ::descriptor_table_Raft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTermFieldNumber = 1,
    kIndexFieldNumber = 2,
    kCommitIndexFieldNumber = 3,
    kSuccessFieldNumber = 4,
  };
  // int64 Term = 1;
  void clear_term();
  ::PROTOBUF_NAMESPACE_ID::int64 term() const;
  void set_term(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_term() const;
  void _internal_set_term(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 Index = 2;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::int64 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 CommitIndex = 3;
  void clear_commitindex();
  ::PROTOBUF_NAMESPACE_ID::int64 commitindex() const;
  void set_commitindex(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_commitindex() const;
  void _internal_set_commitindex(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool Success = 4;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:rpcService.AppendEntriesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 term_;
  ::PROTOBUF_NAMESPACE_ID::int64 index_;
  ::PROTOBUF_NAMESPACE_ID::int64 commitindex_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Raft_2eproto;
};
// -------------------------------------------------------------------

class RequestVoteRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rpcService.RequestVoteRequest) */ {
 public:
  inline RequestVoteRequest() : RequestVoteRequest(nullptr) {};
  virtual ~RequestVoteRequest();

  RequestVoteRequest(const RequestVoteRequest& from);
  RequestVoteRequest(RequestVoteRequest&& from) noexcept
    : RequestVoteRequest() {
    *this = ::std::move(from);
  }

  inline RequestVoteRequest& operator=(const RequestVoteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestVoteRequest& operator=(RequestVoteRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestVoteRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestVoteRequest* internal_default_instance() {
    return reinterpret_cast<const RequestVoteRequest*>(
               &_RequestVoteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RequestVoteRequest& a, RequestVoteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestVoteRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestVoteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestVoteRequest* New() const final {
    return CreateMaybeMessage<RequestVoteRequest>(nullptr);
  }

  RequestVoteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestVoteRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestVoteRequest& from);
  void MergeFrom(const RequestVoteRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestVoteRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rpcService.RequestVoteRequest";
  }
  protected:
  explicit RequestVoteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Raft_2eproto);
    return ::descriptor_table_Raft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCandidateNameFieldNumber = 4,
    kTermFieldNumber = 1,
    kLastLogIndexFieldNumber = 2,
    kLastLogTermFieldNumber = 3,
  };
  // string CandidateName = 4;
  void clear_candidatename();
  const std::string& candidatename() const;
  void set_candidatename(const std::string& value);
  void set_candidatename(std::string&& value);
  void set_candidatename(const char* value);
  void set_candidatename(const char* value, size_t size);
  std::string* mutable_candidatename();
  std::string* release_candidatename();
  void set_allocated_candidatename(std::string* candidatename);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_candidatename();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_candidatename(
      std::string* candidatename);
  private:
  const std::string& _internal_candidatename() const;
  void _internal_set_candidatename(const std::string& value);
  std::string* _internal_mutable_candidatename();
  public:

  // uint64 Term = 1;
  void clear_term();
  ::PROTOBUF_NAMESPACE_ID::uint64 term() const;
  void set_term(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_term() const;
  void _internal_set_term(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 LastLogIndex = 2;
  void clear_lastlogindex();
  ::PROTOBUF_NAMESPACE_ID::uint64 lastlogindex() const;
  void set_lastlogindex(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_lastlogindex() const;
  void _internal_set_lastlogindex(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 LastLogTerm = 3;
  void clear_lastlogterm();
  ::PROTOBUF_NAMESPACE_ID::uint64 lastlogterm() const;
  void set_lastlogterm(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_lastlogterm() const;
  void _internal_set_lastlogterm(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:rpcService.RequestVoteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr candidatename_;
  ::PROTOBUF_NAMESPACE_ID::uint64 term_;
  ::PROTOBUF_NAMESPACE_ID::uint64 lastlogindex_;
  ::PROTOBUF_NAMESPACE_ID::uint64 lastlogterm_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Raft_2eproto;
};
// -------------------------------------------------------------------

class RequestVoteResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rpcService.RequestVoteResponse) */ {
 public:
  inline RequestVoteResponse() : RequestVoteResponse(nullptr) {};
  virtual ~RequestVoteResponse();

  RequestVoteResponse(const RequestVoteResponse& from);
  RequestVoteResponse(RequestVoteResponse&& from) noexcept
    : RequestVoteResponse() {
    *this = ::std::move(from);
  }

  inline RequestVoteResponse& operator=(const RequestVoteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestVoteResponse& operator=(RequestVoteResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestVoteResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestVoteResponse* internal_default_instance() {
    return reinterpret_cast<const RequestVoteResponse*>(
               &_RequestVoteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RequestVoteResponse& a, RequestVoteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestVoteResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestVoteResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestVoteResponse* New() const final {
    return CreateMaybeMessage<RequestVoteResponse>(nullptr);
  }

  RequestVoteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestVoteResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestVoteResponse& from);
  void MergeFrom(const RequestVoteResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestVoteResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rpcService.RequestVoteResponse";
  }
  protected:
  explicit RequestVoteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Raft_2eproto);
    return ::descriptor_table_Raft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTermFieldNumber = 1,
    kVoteGrantedFieldNumber = 2,
  };
  // uint64 Term = 1;
  void clear_term();
  ::PROTOBUF_NAMESPACE_ID::uint64 term() const;
  void set_term(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_term() const;
  void _internal_set_term(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool VoteGranted = 2;
  void clear_votegranted();
  bool votegranted() const;
  void set_votegranted(bool value);
  private:
  bool _internal_votegranted() const;
  void _internal_set_votegranted(bool value);
  public:

  // @@protoc_insertion_point(class_scope:rpcService.RequestVoteResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 term_;
  bool votegranted_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Raft_2eproto;
};
// ===================================================================

class RaftService_Stub;

class RaftService : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline RaftService() {};
 public:
  virtual ~RaftService();

  typedef RaftService_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void AppendEntries(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::rpcService::AppendEntriesRequest* request,
                       ::rpcService::AppendEntriesResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void Vote(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::rpcService::RequestVoteRequest* request,
                       ::rpcService::RequestVoteResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(RaftService);
};

class RaftService_Stub : public RaftService {
 public:
  RaftService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  RaftService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~RaftService_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements RaftService ------------------------------------------

  void AppendEntries(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::rpcService::AppendEntriesRequest* request,
                       ::rpcService::AppendEntriesResponse* response,
                       ::google::protobuf::Closure* done);
  void Vote(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::rpcService::RequestVoteRequest* request,
                       ::rpcService::RequestVoteResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(RaftService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AppendEntriesRequest_LogEntry

// int64 index = 1;
inline void AppendEntriesRequest_LogEntry::clear_index() {
  index_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppendEntriesRequest_LogEntry::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppendEntriesRequest_LogEntry::index() const {
  // @@protoc_insertion_point(field_get:rpcService.AppendEntriesRequest.LogEntry.index)
  return _internal_index();
}
inline void AppendEntriesRequest_LogEntry::_internal_set_index(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  index_ = value;
}
inline void AppendEntriesRequest_LogEntry::set_index(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:rpcService.AppendEntriesRequest.LogEntry.index)
}

// int64 term = 2;
inline void AppendEntriesRequest_LogEntry::clear_term() {
  term_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppendEntriesRequest_LogEntry::_internal_term() const {
  return term_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppendEntriesRequest_LogEntry::term() const {
  // @@protoc_insertion_point(field_get:rpcService.AppendEntriesRequest.LogEntry.term)
  return _internal_term();
}
inline void AppendEntriesRequest_LogEntry::_internal_set_term(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  term_ = value;
}
inline void AppendEntriesRequest_LogEntry::set_term(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:rpcService.AppendEntriesRequest.LogEntry.term)
}

// string commandName = 3;
inline void AppendEntriesRequest_LogEntry::clear_commandname() {
  commandname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AppendEntriesRequest_LogEntry::commandname() const {
  // @@protoc_insertion_point(field_get:rpcService.AppendEntriesRequest.LogEntry.commandName)
  return _internal_commandname();
}
inline void AppendEntriesRequest_LogEntry::set_commandname(const std::string& value) {
  _internal_set_commandname(value);
  // @@protoc_insertion_point(field_set:rpcService.AppendEntriesRequest.LogEntry.commandName)
}
inline std::string* AppendEntriesRequest_LogEntry::mutable_commandname() {
  // @@protoc_insertion_point(field_mutable:rpcService.AppendEntriesRequest.LogEntry.commandName)
  return _internal_mutable_commandname();
}
inline const std::string& AppendEntriesRequest_LogEntry::_internal_commandname() const {
  return commandname_.Get();
}
inline void AppendEntriesRequest_LogEntry::_internal_set_commandname(const std::string& value) {
  
  commandname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AppendEntriesRequest_LogEntry::set_commandname(std::string&& value) {
  
  commandname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rpcService.AppendEntriesRequest.LogEntry.commandName)
}
inline void AppendEntriesRequest_LogEntry::set_commandname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  commandname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:rpcService.AppendEntriesRequest.LogEntry.commandName)
}
inline void AppendEntriesRequest_LogEntry::set_commandname(const char* value,
    size_t size) {
  
  commandname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rpcService.AppendEntriesRequest.LogEntry.commandName)
}
inline std::string* AppendEntriesRequest_LogEntry::_internal_mutable_commandname() {
  
  return commandname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AppendEntriesRequest_LogEntry::release_commandname() {
  // @@protoc_insertion_point(field_release:rpcService.AppendEntriesRequest.LogEntry.commandName)
  return commandname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AppendEntriesRequest_LogEntry::set_allocated_commandname(std::string* commandname) {
  if (commandname != nullptr) {
    
  } else {
    
  }
  commandname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), commandname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rpcService.AppendEntriesRequest.LogEntry.commandName)
}
inline std::string* AppendEntriesRequest_LogEntry::unsafe_arena_release_commandname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rpcService.AppendEntriesRequest.LogEntry.commandName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return commandname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AppendEntriesRequest_LogEntry::unsafe_arena_set_allocated_commandname(
    std::string* commandname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (commandname != nullptr) {
    
  } else {
    
  }
  commandname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      commandname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rpcService.AppendEntriesRequest.LogEntry.commandName)
}

// bytes command = 4;
inline void AppendEntriesRequest_LogEntry::clear_command() {
  command_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AppendEntriesRequest_LogEntry::command() const {
  // @@protoc_insertion_point(field_get:rpcService.AppendEntriesRequest.LogEntry.command)
  return _internal_command();
}
inline void AppendEntriesRequest_LogEntry::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:rpcService.AppendEntriesRequest.LogEntry.command)
}
inline std::string* AppendEntriesRequest_LogEntry::mutable_command() {
  // @@protoc_insertion_point(field_mutable:rpcService.AppendEntriesRequest.LogEntry.command)
  return _internal_mutable_command();
}
inline const std::string& AppendEntriesRequest_LogEntry::_internal_command() const {
  return command_.Get();
}
inline void AppendEntriesRequest_LogEntry::_internal_set_command(const std::string& value) {
  
  command_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AppendEntriesRequest_LogEntry::set_command(std::string&& value) {
  
  command_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rpcService.AppendEntriesRequest.LogEntry.command)
}
inline void AppendEntriesRequest_LogEntry::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:rpcService.AppendEntriesRequest.LogEntry.command)
}
inline void AppendEntriesRequest_LogEntry::set_command(const void* value,
    size_t size) {
  
  command_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rpcService.AppendEntriesRequest.LogEntry.command)
}
inline std::string* AppendEntriesRequest_LogEntry::_internal_mutable_command() {
  
  return command_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AppendEntriesRequest_LogEntry::release_command() {
  // @@protoc_insertion_point(field_release:rpcService.AppendEntriesRequest.LogEntry.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AppendEntriesRequest_LogEntry::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rpcService.AppendEntriesRequest.LogEntry.command)
}
inline std::string* AppendEntriesRequest_LogEntry::unsafe_arena_release_command() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rpcService.AppendEntriesRequest.LogEntry.command)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return command_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AppendEntriesRequest_LogEntry::unsafe_arena_set_allocated_command(
    std::string* command) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (command != nullptr) {
    
  } else {
    
  }
  command_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      command, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rpcService.AppendEntriesRequest.LogEntry.command)
}

// -------------------------------------------------------------------

// AppendEntriesRequest

// int64 term = 1;
inline void AppendEntriesRequest::clear_term() {
  term_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppendEntriesRequest::_internal_term() const {
  return term_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppendEntriesRequest::term() const {
  // @@protoc_insertion_point(field_get:rpcService.AppendEntriesRequest.term)
  return _internal_term();
}
inline void AppendEntriesRequest::_internal_set_term(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  term_ = value;
}
inline void AppendEntriesRequest::set_term(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:rpcService.AppendEntriesRequest.term)
}

// int64 leaderId = 2;
inline void AppendEntriesRequest::clear_leaderid() {
  leaderid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppendEntriesRequest::_internal_leaderid() const {
  return leaderid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppendEntriesRequest::leaderid() const {
  // @@protoc_insertion_point(field_get:rpcService.AppendEntriesRequest.leaderId)
  return _internal_leaderid();
}
inline void AppendEntriesRequest::_internal_set_leaderid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  leaderid_ = value;
}
inline void AppendEntriesRequest::set_leaderid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_leaderid(value);
  // @@protoc_insertion_point(field_set:rpcService.AppendEntriesRequest.leaderId)
}

// int32 prevLogIndex = 3;
inline void AppendEntriesRequest::clear_prevlogindex() {
  prevlogindex_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppendEntriesRequest::_internal_prevlogindex() const {
  return prevlogindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppendEntriesRequest::prevlogindex() const {
  // @@protoc_insertion_point(field_get:rpcService.AppendEntriesRequest.prevLogIndex)
  return _internal_prevlogindex();
}
inline void AppendEntriesRequest::_internal_set_prevlogindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  prevlogindex_ = value;
}
inline void AppendEntriesRequest::set_prevlogindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_prevlogindex(value);
  // @@protoc_insertion_point(field_set:rpcService.AppendEntriesRequest.prevLogIndex)
}

// int32 prevLogTerm = 4;
inline void AppendEntriesRequest::clear_prevlogterm() {
  prevlogterm_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppendEntriesRequest::_internal_prevlogterm() const {
  return prevlogterm_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppendEntriesRequest::prevlogterm() const {
  // @@protoc_insertion_point(field_get:rpcService.AppendEntriesRequest.prevLogTerm)
  return _internal_prevlogterm();
}
inline void AppendEntriesRequest::_internal_set_prevlogterm(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  prevlogterm_ = value;
}
inline void AppendEntriesRequest::set_prevlogterm(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_prevlogterm(value);
  // @@protoc_insertion_point(field_set:rpcService.AppendEntriesRequest.prevLogTerm)
}

// repeated .rpcService.AppendEntriesRequest.LogEntry LogEntries = 5;
inline int AppendEntriesRequest::_internal_logentries_size() const {
  return logentries_.size();
}
inline int AppendEntriesRequest::logentries_size() const {
  return _internal_logentries_size();
}
inline void AppendEntriesRequest::clear_logentries() {
  logentries_.Clear();
}
inline ::rpcService::AppendEntriesRequest_LogEntry* AppendEntriesRequest::mutable_logentries(int index) {
  // @@protoc_insertion_point(field_mutable:rpcService.AppendEntriesRequest.LogEntries)
  return logentries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rpcService::AppendEntriesRequest_LogEntry >*
AppendEntriesRequest::mutable_logentries() {
  // @@protoc_insertion_point(field_mutable_list:rpcService.AppendEntriesRequest.LogEntries)
  return &logentries_;
}
inline const ::rpcService::AppendEntriesRequest_LogEntry& AppendEntriesRequest::_internal_logentries(int index) const {
  return logentries_.Get(index);
}
inline const ::rpcService::AppendEntriesRequest_LogEntry& AppendEntriesRequest::logentries(int index) const {
  // @@protoc_insertion_point(field_get:rpcService.AppendEntriesRequest.LogEntries)
  return _internal_logentries(index);
}
inline ::rpcService::AppendEntriesRequest_LogEntry* AppendEntriesRequest::_internal_add_logentries() {
  return logentries_.Add();
}
inline ::rpcService::AppendEntriesRequest_LogEntry* AppendEntriesRequest::add_logentries() {
  // @@protoc_insertion_point(field_add:rpcService.AppendEntriesRequest.LogEntries)
  return _internal_add_logentries();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rpcService::AppendEntriesRequest_LogEntry >&
AppendEntriesRequest::logentries() const {
  // @@protoc_insertion_point(field_list:rpcService.AppendEntriesRequest.LogEntries)
  return logentries_;
}

// -------------------------------------------------------------------

// AppendEntriesResponse

// int64 Term = 1;
inline void AppendEntriesResponse::clear_term() {
  term_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppendEntriesResponse::_internal_term() const {
  return term_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppendEntriesResponse::term() const {
  // @@protoc_insertion_point(field_get:rpcService.AppendEntriesResponse.Term)
  return _internal_term();
}
inline void AppendEntriesResponse::_internal_set_term(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  term_ = value;
}
inline void AppendEntriesResponse::set_term(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:rpcService.AppendEntriesResponse.Term)
}

// int64 Index = 2;
inline void AppendEntriesResponse::clear_index() {
  index_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppendEntriesResponse::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppendEntriesResponse::index() const {
  // @@protoc_insertion_point(field_get:rpcService.AppendEntriesResponse.Index)
  return _internal_index();
}
inline void AppendEntriesResponse::_internal_set_index(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  index_ = value;
}
inline void AppendEntriesResponse::set_index(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:rpcService.AppendEntriesResponse.Index)
}

// int64 CommitIndex = 3;
inline void AppendEntriesResponse::clear_commitindex() {
  commitindex_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppendEntriesResponse::_internal_commitindex() const {
  return commitindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppendEntriesResponse::commitindex() const {
  // @@protoc_insertion_point(field_get:rpcService.AppendEntriesResponse.CommitIndex)
  return _internal_commitindex();
}
inline void AppendEntriesResponse::_internal_set_commitindex(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  commitindex_ = value;
}
inline void AppendEntriesResponse::set_commitindex(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_commitindex(value);
  // @@protoc_insertion_point(field_set:rpcService.AppendEntriesResponse.CommitIndex)
}

// bool Success = 4;
inline void AppendEntriesResponse::clear_success() {
  success_ = false;
}
inline bool AppendEntriesResponse::_internal_success() const {
  return success_;
}
inline bool AppendEntriesResponse::success() const {
  // @@protoc_insertion_point(field_get:rpcService.AppendEntriesResponse.Success)
  return _internal_success();
}
inline void AppendEntriesResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void AppendEntriesResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:rpcService.AppendEntriesResponse.Success)
}

// -------------------------------------------------------------------

// RequestVoteRequest

// uint64 Term = 1;
inline void RequestVoteRequest::clear_term() {
  term_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RequestVoteRequest::_internal_term() const {
  return term_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RequestVoteRequest::term() const {
  // @@protoc_insertion_point(field_get:rpcService.RequestVoteRequest.Term)
  return _internal_term();
}
inline void RequestVoteRequest::_internal_set_term(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  term_ = value;
}
inline void RequestVoteRequest::set_term(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:rpcService.RequestVoteRequest.Term)
}

// uint64 LastLogIndex = 2;
inline void RequestVoteRequest::clear_lastlogindex() {
  lastlogindex_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RequestVoteRequest::_internal_lastlogindex() const {
  return lastlogindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RequestVoteRequest::lastlogindex() const {
  // @@protoc_insertion_point(field_get:rpcService.RequestVoteRequest.LastLogIndex)
  return _internal_lastlogindex();
}
inline void RequestVoteRequest::_internal_set_lastlogindex(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  lastlogindex_ = value;
}
inline void RequestVoteRequest::set_lastlogindex(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_lastlogindex(value);
  // @@protoc_insertion_point(field_set:rpcService.RequestVoteRequest.LastLogIndex)
}

// uint64 LastLogTerm = 3;
inline void RequestVoteRequest::clear_lastlogterm() {
  lastlogterm_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RequestVoteRequest::_internal_lastlogterm() const {
  return lastlogterm_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RequestVoteRequest::lastlogterm() const {
  // @@protoc_insertion_point(field_get:rpcService.RequestVoteRequest.LastLogTerm)
  return _internal_lastlogterm();
}
inline void RequestVoteRequest::_internal_set_lastlogterm(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  lastlogterm_ = value;
}
inline void RequestVoteRequest::set_lastlogterm(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_lastlogterm(value);
  // @@protoc_insertion_point(field_set:rpcService.RequestVoteRequest.LastLogTerm)
}

// string CandidateName = 4;
inline void RequestVoteRequest::clear_candidatename() {
  candidatename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RequestVoteRequest::candidatename() const {
  // @@protoc_insertion_point(field_get:rpcService.RequestVoteRequest.CandidateName)
  return _internal_candidatename();
}
inline void RequestVoteRequest::set_candidatename(const std::string& value) {
  _internal_set_candidatename(value);
  // @@protoc_insertion_point(field_set:rpcService.RequestVoteRequest.CandidateName)
}
inline std::string* RequestVoteRequest::mutable_candidatename() {
  // @@protoc_insertion_point(field_mutable:rpcService.RequestVoteRequest.CandidateName)
  return _internal_mutable_candidatename();
}
inline const std::string& RequestVoteRequest::_internal_candidatename() const {
  return candidatename_.Get();
}
inline void RequestVoteRequest::_internal_set_candidatename(const std::string& value) {
  
  candidatename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RequestVoteRequest::set_candidatename(std::string&& value) {
  
  candidatename_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rpcService.RequestVoteRequest.CandidateName)
}
inline void RequestVoteRequest::set_candidatename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  candidatename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:rpcService.RequestVoteRequest.CandidateName)
}
inline void RequestVoteRequest::set_candidatename(const char* value,
    size_t size) {
  
  candidatename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rpcService.RequestVoteRequest.CandidateName)
}
inline std::string* RequestVoteRequest::_internal_mutable_candidatename() {
  
  return candidatename_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RequestVoteRequest::release_candidatename() {
  // @@protoc_insertion_point(field_release:rpcService.RequestVoteRequest.CandidateName)
  return candidatename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RequestVoteRequest::set_allocated_candidatename(std::string* candidatename) {
  if (candidatename != nullptr) {
    
  } else {
    
  }
  candidatename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), candidatename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rpcService.RequestVoteRequest.CandidateName)
}
inline std::string* RequestVoteRequest::unsafe_arena_release_candidatename() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rpcService.RequestVoteRequest.CandidateName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return candidatename_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RequestVoteRequest::unsafe_arena_set_allocated_candidatename(
    std::string* candidatename) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (candidatename != nullptr) {
    
  } else {
    
  }
  candidatename_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      candidatename, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rpcService.RequestVoteRequest.CandidateName)
}

// -------------------------------------------------------------------

// RequestVoteResponse

// uint64 Term = 1;
inline void RequestVoteResponse::clear_term() {
  term_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RequestVoteResponse::_internal_term() const {
  return term_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RequestVoteResponse::term() const {
  // @@protoc_insertion_point(field_get:rpcService.RequestVoteResponse.Term)
  return _internal_term();
}
inline void RequestVoteResponse::_internal_set_term(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  term_ = value;
}
inline void RequestVoteResponse::set_term(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:rpcService.RequestVoteResponse.Term)
}

// bool VoteGranted = 2;
inline void RequestVoteResponse::clear_votegranted() {
  votegranted_ = false;
}
inline bool RequestVoteResponse::_internal_votegranted() const {
  return votegranted_;
}
inline bool RequestVoteResponse::votegranted() const {
  // @@protoc_insertion_point(field_get:rpcService.RequestVoteResponse.VoteGranted)
  return _internal_votegranted();
}
inline void RequestVoteResponse::_internal_set_votegranted(bool value) {
  
  votegranted_ = value;
}
inline void RequestVoteResponse::set_votegranted(bool value) {
  _internal_set_votegranted(value);
  // @@protoc_insertion_point(field_set:rpcService.RequestVoteResponse.VoteGranted)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace rpcService

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Raft_2eproto
